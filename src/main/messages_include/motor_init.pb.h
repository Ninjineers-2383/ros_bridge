// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motor_init.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_motor_5finit_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_motor_5finit_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_motor_5finit_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_motor_5finit_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_motor_5finit_2eproto;
namespace messages {
namespace motor {
class Motor_Init_Rep;
struct Motor_Init_RepDefaultTypeInternal;
extern Motor_Init_RepDefaultTypeInternal _Motor_Init_Rep_default_instance_;
class Motor_Init_Req;
struct Motor_Init_ReqDefaultTypeInternal;
extern Motor_Init_ReqDefaultTypeInternal _Motor_Init_Req_default_instance_;
}  // namespace motor
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> ::messages::motor::Motor_Init_Rep* Arena::CreateMaybeMessage<::messages::motor::Motor_Init_Rep>(Arena*);
template<> ::messages::motor::Motor_Init_Req* Arena::CreateMaybeMessage<::messages::motor::Motor_Init_Req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace messages {
namespace motor {

enum MotorType : int {
  Motor_NONE = 0,
  Motor_TalonSRX = 1,
  Motor_TalonFX = 2,
  Motor_SparkMax = 3,
  MotorType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MotorType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MotorType_IsValid(int value);
constexpr MotorType MotorType_MIN = Motor_NONE;
constexpr MotorType MotorType_MAX = Motor_SparkMax;
constexpr int MotorType_ARRAYSIZE = MotorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotorType_descriptor();
template<typename T>
inline const std::string& MotorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MotorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MotorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MotorType_descriptor(), enum_t_value);
}
inline bool MotorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MotorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MotorType>(
    MotorType_descriptor(), name, value);
}
// ===================================================================

class Motor_Init_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.motor.Motor_Init_Req) */ {
 public:
  inline Motor_Init_Req() : Motor_Init_Req(nullptr) {}
  ~Motor_Init_Req() override;
  explicit PROTOBUF_CONSTEXPR Motor_Init_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Motor_Init_Req(const Motor_Init_Req& from);
  Motor_Init_Req(Motor_Init_Req&& from) noexcept
    : Motor_Init_Req() {
    *this = ::std::move(from);
  }

  inline Motor_Init_Req& operator=(const Motor_Init_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motor_Init_Req& operator=(Motor_Init_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motor_Init_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motor_Init_Req* internal_default_instance() {
    return reinterpret_cast<const Motor_Init_Req*>(
               &_Motor_Init_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Motor_Init_Req& a, Motor_Init_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(Motor_Init_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motor_Init_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Motor_Init_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Motor_Init_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Motor_Init_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Motor_Init_Req& from) {
    Motor_Init_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motor_Init_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.motor.Motor_Init_Req";
  }
  protected:
  explicit Motor_Init_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCanBusFieldNumber = 3,
    kMotorTypeFieldNumber = 1,
    kCanIdFieldNumber = 2,
    kPFieldNumber = 4,
    kIFieldNumber = 5,
    kDFieldNumber = 6,
  };
  // optional string can_bus = 3;
  bool has_can_bus() const;
  private:
  bool _internal_has_can_bus() const;
  public:
  void clear_can_bus();
  const std::string& can_bus() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_can_bus(ArgT0&& arg0, ArgT... args);
  std::string* mutable_can_bus();
  PROTOBUF_NODISCARD std::string* release_can_bus();
  void set_allocated_can_bus(std::string* can_bus);
  private:
  const std::string& _internal_can_bus() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_can_bus(const std::string& value);
  std::string* _internal_mutable_can_bus();
  public:

  // optional .messages.motor.MotorType motor_type = 1;
  bool has_motor_type() const;
  private:
  bool _internal_has_motor_type() const;
  public:
  void clear_motor_type();
  ::messages::motor::MotorType motor_type() const;
  void set_motor_type(::messages::motor::MotorType value);
  private:
  ::messages::motor::MotorType _internal_motor_type() const;
  void _internal_set_motor_type(::messages::motor::MotorType value);
  public:

  // optional int32 can_id = 2;
  bool has_can_id() const;
  private:
  bool _internal_has_can_id() const;
  public:
  void clear_can_id();
  int32_t can_id() const;
  void set_can_id(int32_t value);
  private:
  int32_t _internal_can_id() const;
  void _internal_set_can_id(int32_t value);
  public:

  // optional double p = 4;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  double p() const;
  void set_p(double value);
  private:
  double _internal_p() const;
  void _internal_set_p(double value);
  public:

  // optional double i = 5;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  double i() const;
  void set_i(double value);
  private:
  double _internal_i() const;
  void _internal_set_i(double value);
  public:

  // optional double d = 6;
  bool has_d() const;
  private:
  bool _internal_has_d() const;
  public:
  void clear_d();
  double d() const;
  void set_d(double value);
  private:
  double _internal_d() const;
  void _internal_set_d(double value);
  public:

  // @@protoc_insertion_point(class_scope:messages.motor.Motor_Init_Req)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr can_bus_;
    int motor_type_;
    int32_t can_id_;
    double p_;
    double i_;
    double d_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_motor_5finit_2eproto;
};
// -------------------------------------------------------------------

class Motor_Init_Rep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:messages.motor.Motor_Init_Rep) */ {
 public:
  inline Motor_Init_Rep() : Motor_Init_Rep(nullptr) {}
  ~Motor_Init_Rep() override;
  explicit PROTOBUF_CONSTEXPR Motor_Init_Rep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Motor_Init_Rep(const Motor_Init_Rep& from);
  Motor_Init_Rep(Motor_Init_Rep&& from) noexcept
    : Motor_Init_Rep() {
    *this = ::std::move(from);
  }

  inline Motor_Init_Rep& operator=(const Motor_Init_Rep& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motor_Init_Rep& operator=(Motor_Init_Rep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motor_Init_Rep& default_instance() {
    return *internal_default_instance();
  }
  static inline const Motor_Init_Rep* internal_default_instance() {
    return reinterpret_cast<const Motor_Init_Rep*>(
               &_Motor_Init_Rep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Motor_Init_Rep& a, Motor_Init_Rep& b) {
    a.Swap(&b);
  }
  inline void Swap(Motor_Init_Rep* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motor_Init_Rep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Motor_Init_Rep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Motor_Init_Rep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Motor_Init_Rep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Motor_Init_Rep& from) {
    Motor_Init_Rep::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motor_Init_Rep* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "messages.motor.Motor_Init_Rep";
  }
  protected:
  explicit Motor_Init_Rep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorTopicFieldNumber = 3,
    kSuccessFieldNumber = 1,
    kMotorIndexFieldNumber = 2,
  };
  // optional string motor_topic = 3;
  bool has_motor_topic() const;
  private:
  bool _internal_has_motor_topic() const;
  public:
  void clear_motor_topic();
  const std::string& motor_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_motor_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_motor_topic();
  PROTOBUF_NODISCARD std::string* release_motor_topic();
  void set_allocated_motor_topic(std::string* motor_topic);
  private:
  const std::string& _internal_motor_topic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_motor_topic(const std::string& value);
  std::string* _internal_mutable_motor_topic();
  public:

  // optional bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // optional int32 motorIndex = 2;
  bool has_motorindex() const;
  private:
  bool _internal_has_motorindex() const;
  public:
  void clear_motorindex();
  int32_t motorindex() const;
  void set_motorindex(int32_t value);
  private:
  int32_t _internal_motorindex() const;
  void _internal_set_motorindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:messages.motor.Motor_Init_Rep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motor_topic_;
    bool success_;
    int32_t motorindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_motor_5finit_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Motor_Init_Req

// optional .messages.motor.MotorType motor_type = 1;
inline bool Motor_Init_Req::_internal_has_motor_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Motor_Init_Req::has_motor_type() const {
  return _internal_has_motor_type();
}
inline void Motor_Init_Req::clear_motor_type() {
  _impl_.motor_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::messages::motor::MotorType Motor_Init_Req::_internal_motor_type() const {
  return static_cast< ::messages::motor::MotorType >(_impl_.motor_type_);
}
inline ::messages::motor::MotorType Motor_Init_Req::motor_type() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Req.motor_type)
  return _internal_motor_type();
}
inline void Motor_Init_Req::_internal_set_motor_type(::messages::motor::MotorType value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.motor_type_ = value;
}
inline void Motor_Init_Req::set_motor_type(::messages::motor::MotorType value) {
  _internal_set_motor_type(value);
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Req.motor_type)
}

// optional int32 can_id = 2;
inline bool Motor_Init_Req::_internal_has_can_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Motor_Init_Req::has_can_id() const {
  return _internal_has_can_id();
}
inline void Motor_Init_Req::clear_can_id() {
  _impl_.can_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Motor_Init_Req::_internal_can_id() const {
  return _impl_.can_id_;
}
inline int32_t Motor_Init_Req::can_id() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Req.can_id)
  return _internal_can_id();
}
inline void Motor_Init_Req::_internal_set_can_id(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.can_id_ = value;
}
inline void Motor_Init_Req::set_can_id(int32_t value) {
  _internal_set_can_id(value);
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Req.can_id)
}

// optional string can_bus = 3;
inline bool Motor_Init_Req::_internal_has_can_bus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Motor_Init_Req::has_can_bus() const {
  return _internal_has_can_bus();
}
inline void Motor_Init_Req::clear_can_bus() {
  _impl_.can_bus_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Motor_Init_Req::can_bus() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Req.can_bus)
  return _internal_can_bus();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Motor_Init_Req::set_can_bus(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.can_bus_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Req.can_bus)
}
inline std::string* Motor_Init_Req::mutable_can_bus() {
  std::string* _s = _internal_mutable_can_bus();
  // @@protoc_insertion_point(field_mutable:messages.motor.Motor_Init_Req.can_bus)
  return _s;
}
inline const std::string& Motor_Init_Req::_internal_can_bus() const {
  return _impl_.can_bus_.Get();
}
inline void Motor_Init_Req::_internal_set_can_bus(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.can_bus_.Set(value, GetArenaForAllocation());
}
inline std::string* Motor_Init_Req::_internal_mutable_can_bus() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.can_bus_.Mutable(GetArenaForAllocation());
}
inline std::string* Motor_Init_Req::release_can_bus() {
  // @@protoc_insertion_point(field_release:messages.motor.Motor_Init_Req.can_bus)
  if (!_internal_has_can_bus()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.can_bus_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.can_bus_.IsDefault()) {
    _impl_.can_bus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Motor_Init_Req::set_allocated_can_bus(std::string* can_bus) {
  if (can_bus != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.can_bus_.SetAllocated(can_bus, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.can_bus_.IsDefault()) {
    _impl_.can_bus_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.motor.Motor_Init_Req.can_bus)
}

// optional double p = 4;
inline bool Motor_Init_Req::_internal_has_p() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Motor_Init_Req::has_p() const {
  return _internal_has_p();
}
inline void Motor_Init_Req::clear_p() {
  _impl_.p_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double Motor_Init_Req::_internal_p() const {
  return _impl_.p_;
}
inline double Motor_Init_Req::p() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Req.p)
  return _internal_p();
}
inline void Motor_Init_Req::_internal_set_p(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.p_ = value;
}
inline void Motor_Init_Req::set_p(double value) {
  _internal_set_p(value);
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Req.p)
}

// optional double i = 5;
inline bool Motor_Init_Req::_internal_has_i() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Motor_Init_Req::has_i() const {
  return _internal_has_i();
}
inline void Motor_Init_Req::clear_i() {
  _impl_.i_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double Motor_Init_Req::_internal_i() const {
  return _impl_.i_;
}
inline double Motor_Init_Req::i() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Req.i)
  return _internal_i();
}
inline void Motor_Init_Req::_internal_set_i(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.i_ = value;
}
inline void Motor_Init_Req::set_i(double value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Req.i)
}

// optional double d = 6;
inline bool Motor_Init_Req::_internal_has_d() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Motor_Init_Req::has_d() const {
  return _internal_has_d();
}
inline void Motor_Init_Req::clear_d() {
  _impl_.d_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double Motor_Init_Req::_internal_d() const {
  return _impl_.d_;
}
inline double Motor_Init_Req::d() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Req.d)
  return _internal_d();
}
inline void Motor_Init_Req::_internal_set_d(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.d_ = value;
}
inline void Motor_Init_Req::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Req.d)
}

// -------------------------------------------------------------------

// Motor_Init_Rep

// optional bool success = 1;
inline bool Motor_Init_Rep::_internal_has_success() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Motor_Init_Rep::has_success() const {
  return _internal_has_success();
}
inline void Motor_Init_Rep::clear_success() {
  _impl_.success_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Motor_Init_Rep::_internal_success() const {
  return _impl_.success_;
}
inline bool Motor_Init_Rep::success() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Rep.success)
  return _internal_success();
}
inline void Motor_Init_Rep::_internal_set_success(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.success_ = value;
}
inline void Motor_Init_Rep::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Rep.success)
}

// optional int32 motorIndex = 2;
inline bool Motor_Init_Rep::_internal_has_motorindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Motor_Init_Rep::has_motorindex() const {
  return _internal_has_motorindex();
}
inline void Motor_Init_Rep::clear_motorindex() {
  _impl_.motorindex_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t Motor_Init_Rep::_internal_motorindex() const {
  return _impl_.motorindex_;
}
inline int32_t Motor_Init_Rep::motorindex() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Rep.motorIndex)
  return _internal_motorindex();
}
inline void Motor_Init_Rep::_internal_set_motorindex(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.motorindex_ = value;
}
inline void Motor_Init_Rep::set_motorindex(int32_t value) {
  _internal_set_motorindex(value);
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Rep.motorIndex)
}

// optional string motor_topic = 3;
inline bool Motor_Init_Rep::_internal_has_motor_topic() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Motor_Init_Rep::has_motor_topic() const {
  return _internal_has_motor_topic();
}
inline void Motor_Init_Rep::clear_motor_topic() {
  _impl_.motor_topic_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Motor_Init_Rep::motor_topic() const {
  // @@protoc_insertion_point(field_get:messages.motor.Motor_Init_Rep.motor_topic)
  return _internal_motor_topic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Motor_Init_Rep::set_motor_topic(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.motor_topic_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:messages.motor.Motor_Init_Rep.motor_topic)
}
inline std::string* Motor_Init_Rep::mutable_motor_topic() {
  std::string* _s = _internal_mutable_motor_topic();
  // @@protoc_insertion_point(field_mutable:messages.motor.Motor_Init_Rep.motor_topic)
  return _s;
}
inline const std::string& Motor_Init_Rep::_internal_motor_topic() const {
  return _impl_.motor_topic_.Get();
}
inline void Motor_Init_Rep::_internal_set_motor_topic(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.motor_topic_.Set(value, GetArenaForAllocation());
}
inline std::string* Motor_Init_Rep::_internal_mutable_motor_topic() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.motor_topic_.Mutable(GetArenaForAllocation());
}
inline std::string* Motor_Init_Rep::release_motor_topic() {
  // @@protoc_insertion_point(field_release:messages.motor.Motor_Init_Rep.motor_topic)
  if (!_internal_has_motor_topic()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.motor_topic_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.motor_topic_.IsDefault()) {
    _impl_.motor_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Motor_Init_Rep::set_allocated_motor_topic(std::string* motor_topic) {
  if (motor_topic != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.motor_topic_.SetAllocated(motor_topic, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.motor_topic_.IsDefault()) {
    _impl_.motor_topic_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:messages.motor.Motor_Init_Rep.motor_topic)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace motor
}  // namespace messages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::messages::motor::MotorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::messages::motor::MotorType>() {
  return ::messages::motor::MotorType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_motor_5finit_2eproto
