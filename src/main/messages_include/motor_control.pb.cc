// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motor_control.proto

#include "motor_control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace messages {
namespace motor {
PROTOBUF_CONSTEXPR Motor_Control_Req::Motor_Control_Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.voltage_)*/0
  , /*decltype(_impl_.position_)*/0
  , /*decltype(_impl_.velocity_)*/0
  , /*decltype(_impl_.control_)*/0
  , /*decltype(_impl_.motor_id_)*/0
  , /*decltype(_impl_.acceleration_)*/0
  , /*decltype(_impl_.effort_)*/0} {}
struct Motor_Control_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Motor_Control_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Motor_Control_ReqDefaultTypeInternal() {}
  union {
    Motor_Control_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Motor_Control_ReqDefaultTypeInternal _Motor_Control_Req_default_instance_;
PROTOBUF_CONSTEXPR Motor_Control_Rep::Motor_Control_Rep(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Motor_Control_RepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Motor_Control_RepDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Motor_Control_RepDefaultTypeInternal() {}
  union {
    Motor_Control_Rep _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Motor_Control_RepDefaultTypeInternal _Motor_Control_Rep_default_instance_;
}  // namespace motor
}  // namespace messages
static ::_pb::Metadata file_level_metadata_motor_5fcontrol_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_motor_5fcontrol_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_motor_5fcontrol_2eproto = nullptr;

const uint32_t TableStruct_motor_5fcontrol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_.control_),
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_.motor_id_),
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_.voltage_),
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_.velocity_),
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_.acceleration_),
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Req, _impl_.effort_),
  3,
  4,
  0,
  1,
  2,
  5,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Rep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::messages::motor::Motor_Control_Rep, _impl_.success_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, -1, sizeof(::messages::motor::Motor_Control_Req)},
  { 20, -1, -1, sizeof(::messages::motor::Motor_Control_Rep)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::messages::motor::_Motor_Control_Req_default_instance_._instance,
  &::messages::motor::_Motor_Control_Rep_default_instance_._instance,
};

const char descriptor_table_protodef_motor_5fcontrol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023motor_control.proto\022\016messages.motor\"\261\002"
  "\n\021Motor_Control_Req\0226\n\007control\030\001 \001(\0162 .m"
  "essages.motor.MotorControlTypeH\000\210\001\001\022\025\n\010m"
  "otor_id\030\007 \001(\005H\001\210\001\001\022\024\n\007voltage\030\002 \001(\001H\002\210\001\001"
  "\022\025\n\010position\030\003 \001(\001H\003\210\001\001\022\025\n\010velocity\030\004 \001("
  "\001H\004\210\001\001\022\031\n\014acceleration\030\005 \001(\001H\005\210\001\001\022\023\n\006eff"
  "ort\030\006 \001(\001H\006\210\001\001B\n\n\010_controlB\013\n\t_motor_idB"
  "\n\n\010_voltageB\013\n\t_positionB\013\n\t_velocityB\017\n"
  "\r_accelerationB\t\n\007_effort\"$\n\021Motor_Contr"
  "ol_Rep\022\017\n\007success\030\001 \001(\010*`\n\020MotorControlT"
  "ype\022\017\n\013CONTROL_OFF\020\000\022\023\n\017CONTROL_VOLTAGE\020"
  "\001\022\022\n\016CONTROL_PID_FF\020\002\022\022\n\016CONTROL_EFFORT\020"
  "\003b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_motor_5fcontrol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_motor_5fcontrol_2eproto = {
    false, false, 489, descriptor_table_protodef_motor_5fcontrol_2eproto,
    "motor_control.proto",
    &descriptor_table_motor_5fcontrol_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_motor_5fcontrol_2eproto::offsets,
    file_level_metadata_motor_5fcontrol_2eproto, file_level_enum_descriptors_motor_5fcontrol_2eproto,
    file_level_service_descriptors_motor_5fcontrol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_motor_5fcontrol_2eproto_getter() {
  return &descriptor_table_motor_5fcontrol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_motor_5fcontrol_2eproto(&descriptor_table_motor_5fcontrol_2eproto);
namespace messages {
namespace motor {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MotorControlType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_motor_5fcontrol_2eproto);
  return file_level_enum_descriptors_motor_5fcontrol_2eproto[0];
}
bool MotorControlType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Motor_Control_Req::_Internal {
 public:
  using HasBits = decltype(std::declval<Motor_Control_Req>()._impl_._has_bits_);
  static void set_has_control(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_motor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_voltage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_effort(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Motor_Control_Req::Motor_Control_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:messages.motor.Motor_Control_Req)
}
Motor_Control_Req::Motor_Control_Req(const Motor_Control_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Motor_Control_Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voltage_){}
    , decltype(_impl_.position_){}
    , decltype(_impl_.velocity_){}
    , decltype(_impl_.control_){}
    , decltype(_impl_.motor_id_){}
    , decltype(_impl_.acceleration_){}
    , decltype(_impl_.effort_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.voltage_, &from._impl_.voltage_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.effort_) -
    reinterpret_cast<char*>(&_impl_.voltage_)) + sizeof(_impl_.effort_));
  // @@protoc_insertion_point(copy_constructor:messages.motor.Motor_Control_Req)
}

inline void Motor_Control_Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.voltage_){0}
    , decltype(_impl_.position_){0}
    , decltype(_impl_.velocity_){0}
    , decltype(_impl_.control_){0}
    , decltype(_impl_.motor_id_){0}
    , decltype(_impl_.acceleration_){0}
    , decltype(_impl_.effort_){0}
  };
}

Motor_Control_Req::~Motor_Control_Req() {
  // @@protoc_insertion_point(destructor:messages.motor.Motor_Control_Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Motor_Control_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Motor_Control_Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Motor_Control_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.motor.Motor_Control_Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.voltage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.effort_) -
        reinterpret_cast<char*>(&_impl_.voltage_)) + sizeof(_impl_.effort_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motor_Control_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .messages.motor.MotorControlType control = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control(static_cast<::messages::motor::MotorControlType>(val));
        } else
          goto handle_unusual;
        continue;
      // optional double voltage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_voltage(&has_bits);
          _impl_.voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_position(&has_bits);
          _impl_.position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double velocity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_velocity(&has_bits);
          _impl_.velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double acceleration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_acceleration(&has_bits);
          _impl_.acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double effort = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_effort(&has_bits);
          _impl_.effort_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 motor_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_motor_id(&has_bits);
          _impl_.motor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Motor_Control_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.motor.Motor_Control_Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .messages.motor.MotorControlType control = 1;
  if (_internal_has_control()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_control(), target);
  }

  // optional double voltage = 2;
  if (_internal_has_voltage()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_voltage(), target);
  }

  // optional double position = 3;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_position(), target);
  }

  // optional double velocity = 4;
  if (_internal_has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_velocity(), target);
  }

  // optional double acceleration = 5;
  if (_internal_has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_acceleration(), target);
  }

  // optional double effort = 6;
  if (_internal_has_effort()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_effort(), target);
  }

  // optional int32 motor_id = 7;
  if (_internal_has_motor_id()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_motor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messages.motor.Motor_Control_Req)
  return target;
}

size_t Motor_Control_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.motor.Motor_Control_Req)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional double voltage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double position = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double velocity = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional .messages.motor.MotorControlType control = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_control());
    }

    // optional int32 motor_id = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_motor_id());
    }

    // optional double acceleration = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double effort = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motor_Control_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Motor_Control_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motor_Control_Req::GetClassData() const { return &_class_data_; }


void Motor_Control_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Motor_Control_Req*>(&to_msg);
  auto& from = static_cast<const Motor_Control_Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:messages.motor.Motor_Control_Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.voltage_ = from._impl_.voltage_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.position_ = from._impl_.position_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.velocity_ = from._impl_.velocity_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.control_ = from._impl_.control_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.motor_id_ = from._impl_.motor_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.acceleration_ = from._impl_.acceleration_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.effort_ = from._impl_.effort_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motor_Control_Req::CopyFrom(const Motor_Control_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.motor.Motor_Control_Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motor_Control_Req::IsInitialized() const {
  return true;
}

void Motor_Control_Req::InternalSwap(Motor_Control_Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Motor_Control_Req, _impl_.effort_)
      + sizeof(Motor_Control_Req::_impl_.effort_)
      - PROTOBUF_FIELD_OFFSET(Motor_Control_Req, _impl_.voltage_)>(
          reinterpret_cast<char*>(&_impl_.voltage_),
          reinterpret_cast<char*>(&other->_impl_.voltage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Motor_Control_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_motor_5fcontrol_2eproto_getter, &descriptor_table_motor_5fcontrol_2eproto_once,
      file_level_metadata_motor_5fcontrol_2eproto[0]);
}

// ===================================================================

class Motor_Control_Rep::_Internal {
 public:
};

Motor_Control_Rep::Motor_Control_Rep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:messages.motor.Motor_Control_Rep)
}
Motor_Control_Rep::Motor_Control_Rep(const Motor_Control_Rep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Motor_Control_Rep* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:messages.motor.Motor_Control_Rep)
}

inline void Motor_Control_Rep::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Motor_Control_Rep::~Motor_Control_Rep() {
  // @@protoc_insertion_point(destructor:messages.motor.Motor_Control_Rep)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Motor_Control_Rep::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Motor_Control_Rep::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Motor_Control_Rep::Clear() {
// @@protoc_insertion_point(message_clear_start:messages.motor.Motor_Control_Rep)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motor_Control_Rep::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Motor_Control_Rep::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messages.motor.Motor_Control_Rep)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messages.motor.Motor_Control_Rep)
  return target;
}

size_t Motor_Control_Rep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messages.motor.Motor_Control_Rep)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motor_Control_Rep::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Motor_Control_Rep::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motor_Control_Rep::GetClassData() const { return &_class_data_; }


void Motor_Control_Rep::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Motor_Control_Rep*>(&to_msg);
  auto& from = static_cast<const Motor_Control_Rep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:messages.motor.Motor_Control_Rep)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motor_Control_Rep::CopyFrom(const Motor_Control_Rep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messages.motor.Motor_Control_Rep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motor_Control_Rep::IsInitialized() const {
  return true;
}

void Motor_Control_Rep::InternalSwap(Motor_Control_Rep* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Motor_Control_Rep::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_motor_5fcontrol_2eproto_getter, &descriptor_table_motor_5fcontrol_2eproto_once,
      file_level_metadata_motor_5fcontrol_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace motor
}  // namespace messages
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::messages::motor::Motor_Control_Req*
Arena::CreateMaybeMessage< ::messages::motor::Motor_Control_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::motor::Motor_Control_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::messages::motor::Motor_Control_Rep*
Arena::CreateMaybeMessage< ::messages::motor::Motor_Control_Rep >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messages::motor::Motor_Control_Rep >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
